import os
import requests
from aiogram import Bot, Dispatcher, types, executor
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip
import speech_recognition as sr
from googletrans import Translator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
translator = Translator()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
def download_video(url, save_path="video.mp4"):


    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        with open(save_path, "wb") as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)
        return save_path
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
def audio_to_subtitles(audio_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_path) as source:
        audio = recognizer.record(source)
        text = recognizer.recognize_google(audio, language="ru-RU")
    return text

# –ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
def add_subtitles(video_path, text, output_path="output.mp4"):
    video = VideoFileClip(video_path)
    txt_clip = TextClip(text, fontsize=24, color="white", bg_color="black")
    txt_clip = txt_clip.set_position(("center", "bottom")).set_duration(video.duration)
    final_video = CompositeVideoClip([video, txt_clip])
    final_video.write_videofile(output_path)
    return output_path

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=[types.ContentType.TEXT])
async def handle_message(message: types.Message):
    if message.text.startswith(("http://", "https://")):
        await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        try:
            video_path = download_video(message.text)

            await message.reply("üîâ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
            audio_path = "audio.wav"
            VideoFileClip(video_path).audio.write_audiofile(audio_path)

            await message.reply("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
            subtitles = audio_to_subtitles(audio_path)

            await message.reply("üåç –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
            translated = translator.translate(subtitles, dest="en").text

            await message.reply("üé¨ –ù–∞–∫–ª–∞–¥—ã–≤–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
            output_video = add_subtitles(video_path, translated)

            await message.reply_video(types.InputFile(output_video))

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(video_path)
            os.remove(audio_path)
            os.remove(output_video)

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)